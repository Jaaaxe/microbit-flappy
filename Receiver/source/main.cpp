     
     // UFCFVK-15-2 Internet of Things
     // Challenge 02
     // Description: The game flappy bird reinvented for a microbit with communication
     //              in order to show the real time score using a second microbit
     // File: main.cpp for the receiver microbit
     // Authors: Mariyam Yasmeen (S1800367) & Ismath Ibrahim (S1900094)          
     // Version: 1.2.500 
     // Modified: 15 April 2020  
     // Setup: Connect crocodile cables from P0 to P0 and from GND to GND on two microbits            

    #include "MicroBit.h"
    
    MicroBit uBit; // Microbit object instance that would provide the drivers and functions to control the microbit
    MicroBitPin P0(MICROBIT_ID_IO_P0, MICROBIT_PIN_P0, PIN_CAPABILITY_DIGITAL); //Provides control over the P0 GPIO Pin
    int score; // Defines the score kept by the microbit
    
    
     // Tracks the time between 1 and 0 from the incoming signal on GPIO pin P0
     // The time tracked determines what action is performed by the microbit
     // If the TotalTracked is "300" it will add 1 to the running score
     // If the TotalTracked is "200" it will trigger the game over functon and reset the microbit
     // @param None
     // @return int TotalTracked - which is the total length of the incoming signal
     
    int DetectSignal() {
        while (1) {
            
            if (P0.getDigitalValue()) { // Checks for incoming signal of 1 from GPIO Pin P0 
                int StartTime = uBit.systemTime(); // Gets the time from last microbit reset
                
                while(P0.getDigitalValue()) {} // Waits for the pulse sent through the sender to end
                	int TotalTracked = uBit.systemTime() - StartTime; // Determines the length of the incoming pulse
                
                if (TotalTracked > 50) { // An extra step to make sure the signal was valid
                    return TotalTracked;
                
                }
            }
        }   
    }
    
     // Checks to see if the incoming signal fits into the determined range so it can be treated as a verified signal
     // Error margins can help the microbit to function on small timing errors for more accurate results
     // @param int incoming - the pulse received from the sender microbit generated by the DetectSignal() function. Value of either "200" or "300".
     // @param int pulse - the expected pulse for a certain function
		 // @param int margin - the plus or minus value on the incoming signal so that the receiver can factor in errors
	   // @return bool - true or false. True if the incoming signal falls within the specified range, if not it returns false.
    
    bool VerifiedSignal(int incoming, int pulse, int margin) {
	    
	    if ((incoming < (pulse + margin)) && (incoming > (pulse - margin))) {
	            return true;
	       
	        } else {
	            return false;
	        }
	    }
    
     // Scoreboard for the game being played on the connected microbit. Displays running and final score.
     // @param None
     // @return Void
    
    void HandlePulse() {

        int SignalType = DetectSignal();
            
            if (VerifiedSignal(SignalType, 300, 25)) { // Determines that if a pulse of 300 is received the score increments by 1
                 score++;
                    
                    if(score < 10){
                        uBit.display.print(score); // Scores below 10 are printed
                    
                    }else if(score < 20) {
                        uBit.display.scroll(score, 50); // Scores starting from 10 are scrolled for obvious reasons
                    
                    }else if(score < 30){
                        uBit.display.scroll(score, 40); // Compensating for faster game speed
                    
                    }else{
                        uBit.display.scroll(score, 30); //  Compensating for faster game speed 
                    }    
                    
            } else if (VerifiedSignal(SignalType, 200, 25)) { // Determines that if a pulse of 200 is received the game has ended
           
                uBit.display.scroll("Score:"); // The final score is displayed before being reset
                uBit.display.scroll(score);
                uBit.sleep(100);
                uBit.reset(); 
           
            }
        
    }
    
    int main (){
        
        uBit.init(); // Initialises the microbit
        score = 0; // Initialises score
        uBit.display.print(score); // Starts the game off with zero
        
        while (1) {
           
            HandlePulse(); // Runs the scoreboard infinitely 
        
        }
        
    }